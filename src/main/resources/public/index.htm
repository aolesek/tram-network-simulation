<!doctype html>
<html lang="en">
  <head>
    <title>Tram network simulation</title>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="styles.css">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ==" crossorigin=""/>

    <!-- Make sure you put this AFTER Leaflet's CSS -->
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js" integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log==" crossorigin=""></script>
  </head>
  <body>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">
      <a class="navbar-brand" href="#">Tram network simulation</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarsExampleDefault">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#" onclick="startStop()">stop</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="agps" href="#" onclick="gpsOn()">gps</a>
          </li>

          <li class="nav-item">
            <a class="nav-link" href="#" onclick="realTime()">real time</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#" onclick="speedUp()">speed up</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#" onclick="speedDown()">speed down</a>
          </li>




          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="http://example.com" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">json data</a>
            <div class="dropdown-menu" aria-labelledby="dropdown01">
              <a class="dropdown-item" href="/time">current time</a>
              <a class="dropdown-item" href="/trams">trams</a>
              <a class="dropdown-item" href="/step">one step time</a>
            </div>
          </li>

        </ul>
      </div>
    </nav>
<main>
  <div class="container-fluid">
  <div class="row">
    <div class="col-sm-10" style="background-color:lavender;"><div id="mapid"></div></div>
    <div class="col-sm-2" style="background-color:lavenderblush;">
      <div id="infoparent">
        <p id="time"></p>
        <p id="info"></p>
        <p id="gpsInfo"></p>
        <textarea id="tracking"></textarea>
        <button onclick="copyclear()">copy&clear</button>
        <button id="hidebutton" onclick="hideTrams()">hide trams</button>
        <button onclick="document.getElementById('modelTrack').innerHTML = ''">clear model track</button>
        <button onclick="document.getElementById('gpsTrack').innerHTML = ''">clear gps track</button>

        <input type="text" id="gpsId" placeholder="gps tram id" value="x"/>
        <input type="text" id="modelId" placeholder="model tram id" value="x"/>
        <textarea id="gpsTrack"></textarea>
        <textarea id="modelTrack"></textarea>


        <p id="copyinfo"></p>
      </div>
    </div>
  </div>
</div>
</main>
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"></script>
    <script>
      var refreshInterval = 1000;
      var h =0; m =0; s = 0;

        function realTime() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log('speed changed to real-time');
                }
            };
            xhttp.open("GET", "/time/real", true);
            xhttp.send();
        }

        function speedUp() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log('speed increased');
                    console.log('current break: '+this.responseText);

                }
            };
            xhttp.open("GET", "/time/up", true);
            xhttp.send();
        }

        function speedDown() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log('speed decreased');
                    console.log('current break: '+this.responseText);
                }
            };
            xhttp.open("GET", "/time/down", true);
            xhttp.send();
        }

      function copyclear() {



          try {
              var coordinates = document.getElementById('tracking');
              coordinates.select();
              var successful = document.execCommand('copy');
              var msg = successful ? 'successful' : 'unsuccessful';
              console.log('Copying text command was ' + msg);
              document.getElementById('tracking').innerHTML = "";
              document.getElementById('copyinfo').innerHTML = "Skopiowano!";
              setTimeout(function() {document.getElementById('copyinfo').innerHTML = "";}, 3000);
          } catch (err) {
              alert('Oops, unable to copy');
          }

      }

      var stopped = true;
      function startStop() {
          if (stopped == false) {
              stopped = true;
          } else {
              stopped = false;
          }

          alert(stopped);
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
              if (this.readyState == 4 && this.status == 200) {
                  console.log('start stop');
              }
          };
          xhttp.open("GET", "/startstop", true);
          xhttp.send();


      }

      function hideTrams() {
          document.getElementById('info').setAttribute("style", "display: none");
          document.getElementById('gpsInfo').setAttribute("style", "display: none");

          document.getElementById('hidebutton').setAttribute("onclick", "showTrams()");
          document.getElementById('hidebutton').innerHTML = "show trams";
      }

      function showTrams() {
          document.getElementById('info').setAttribute("style", "display: block");
          document.getElementById('gpsInfo').setAttribute("style", "display: block");

          document.getElementById('hidebutton').setAttribute("onclick", "hideTrams()");
          document.getElementById('hidebutton').innerHTML = "hide trams";
      }

      hideTrams();

      var gpsData = false;

      var mymap = L.map('mapid').setView([50.0663, 19.922], 13);

      L.tileLayer( 'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=26e3b7adab224e29934c30d69f353388', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
          subdomains: ['a','b','c']
      }).addTo( mymap );



      mymap.on('click', function(e) {
          var popLocation= e.latlng;
          if (document.getElementById("tracking").innerHTML == "") {
            document.getElementById("tracking").innerHTML = popLocation.lat + ", " + popLocation.lng;
          } else {
            document.getElementById("tracking").innerHTML = document.getElementById("tracking").innerHTML + "; " + popLocation.lat + ", " + popLocation.lng;
          }

      });

      mymap.on('contextmenu',function(){
          document.getElementById('tracking').innerHTML = ''
      });

      var gpscurrentMarkers = new Array();

      function gpsOff() {
          gpsData = false;
          document.getElementById("agps").setAttribute("onclick","gpsOn()");


          setTimeout( function() {
              if (gpscurrentMarkers) {
                  for (var j = 0; j < gpscurrentMarkers.length; j++) {
                      mymap.removeLayer(gpscurrentMarkers[j]);
                  }
              }
          },3000);

      }

      function gpsOn() {
          gpsData = true;
          document.getElementById("agps").setAttribute("onclick","gpsOff()");



          var gpsxhttp = new XMLHttpRequest();

          gpsxhttp.open("GET", "/gpsTrams", true);
          gpsxhttp.send();

          gpsxhttp.onreadystatechange = function() {
              if (this.readyState == 4 && this.status == 200) {
                  var gpsobj = JSON.parse(this.responseText);
                  document.getElementById("gpsInfo").innerHTML = this.responseText;
                  if (gpscurrentMarkers) {
                      for (var j = 0; j < gpscurrentMarkers.length; j++) {
                          mymap.removeLayer(gpscurrentMarkers[j]);
                      }
                  }

                  var gps

                  for (var i = 0; i < gpsobj.length; i++) {
                      var id = gpsobj[i].id;
                      console.log(gpsobj[i]);
                      var marker =
                          gpscurrentMarkers.push(L.marker([gpsobj[i].coordinates.y, gpsobj[i].coordinates.x]
                              , {
                                  icon: new L.DivIcon({
                                      className: 'my-div-icon',
                                      html: '<img class="my-div-image" src="2r.png" onclick="alert('+gpsobj[i].id+')"/>'+
                                      '<span class="my-div-span" style="font-size: 8px;">'+gpsobj[i].pathId + '</span>'
                                  })
                              }
                          ).addTo(mymap));

                          if (gpsobj[i].id == document.getElementById("gpsId").value) {
                              var currentDate = new Date();
                              document.getElementById("gpsTrack").innerHTML += currentDate.getHours() + ":" + currentDate.getMinutes()+":"+currentDate.getSeconds()+";";
                              document.getElementById("gpsTrack").innerHTML += gpsobj[i].coordinates.y + "," + gpsobj[i].coordinates.x + ";";
                              document.getElementById("gpsTrack").innerHTML += "\n";
                          }
                  }

                  if (gpsData) {
                      setTimeout(function() {
                          gpsxhttp.open("GET", "/gpsTrams", true);
                          gpsxhttp.send();
                      }, refreshInterval);

                  }

              }
          };

      }

      //GPS DATA



      //END GPS DATA


      var currentMarkers = new Array();

      var xhttp = new XMLHttpRequest();

      xhttp.open("GET", "/trams", true);
      xhttp.send();

      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var obj = JSON.parse(this.responseText);
          document.getElementById("info").innerHTML = this.responseText;
          if (currentMarkers) {
            for (var j = 0; j < currentMarkers.length; j++) {
              mymap.removeLayer(currentMarkers[j]);
            }
          }

          for (var i = 0; i < obj.length; i++) {
            var marker =
             currentMarkers.push(L.marker([obj[i].coordinates.x, obj[i].coordinates.y]
               , {
                   icon: new L.DivIcon({
                       className: 'my-div-icon',
                       html: '<img class="my-div-image" src="1r.png" onclick="alert('+obj[i].id+')"/>'+
                             '<span class="my-div-span">'+obj[i].officialLine.number + '>' + obj[i].officialLine.direction +'</span>'
                   })


               }
             ).addTo(mymap));

              if ((obj[i].id == document.getElementById("modelId").value) && !stopped) {
                  //alert(obj[i].id)
                  var currentDate = new Date();
                  document.getElementById("modelTrack").innerHTML += h + ":" + m+":"+s+";";
                  document.getElementById("modelTrack").innerHTML += obj[i].coordinates.y + "," + obj[i].coordinates.x + ";";
                  document.getElementById("modelTrack").innerHTML += "\n";

              }
          }

          setTimeout(function () {
              xhttp.open("GET", "/trams", true);
              xhttp.send();
          }, refreshInterval);

        }
      };

      var time = new XMLHttpRequest();

      time.open("GET", "/time", true);
      time.send();

      time.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {

          document.getElementById("time").innerHTML = this.responseText;
          var obj = JSON.parse(this.responseText);
          h = obj.hour;
          m = obj.minute;
          s = obj.second;

          setTimeout(function() {
              time.open("GET", "/time", true);
              time.send();
          }, refreshInterval)

        }
      };



    </script>
  </body>
</html>