<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>The HTML5 Herald</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
  <link rel="stylesheet" href="styles.css?">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"
     integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ=="
     crossorigin=""/>
     <!-- Make sure you put this AFTER Leaflet's CSS -->
     <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"
     integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log=="
     crossorigin=""></script>
</head>
<body>
  <div id="mapid"></div>
  <div id="infoparent">
    <p id="time"></p>
    <p id="info"></p>
    <p id="tracking"></p>
    <button onclick="document.getElementById('tracking').innerHTML = ''">clear lol</button>
  </div>
  <script>

    var mymap = L.map('mapid').setView([50.0625, 19.916], 17);
    // L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiYXJrYXR5dSIsImEiOiJjamIxNmdhd2wxNHA2MnFuMmY2OTI5a2JtIn0.p30AF-SAIsDzhzXDDSo2zg', {
    //   attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
    //   maxZoom: 18,
    //   id: 'mapbox.streets',
    //   accessToken: 'your.mapbox.access.token'
    // }).addTo(mymap);

    L.tileLayer( 'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=26e3b7adab224e29934c30d69f353388', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
        subdomains: ['a','b','c']
    }).addTo( mymap );



    mymap.on('click', function(e) {
        var popLocation= e.latlng;
        document.getElementById("tracking").innerHTML = document.getElementById("tracking").innerHTML + popLocation.lat + ", " + popLocation.lng + "; ";
    });


    var aIcon = new Array();

    aIcon.push(
      L.icon({
        iconUrl: '1r.png',
        shadowUrl: '1r.png',

        iconSize:     [25, 25], // size of the icon
        shadowSize:   [0, 0], // size of the shadow
        iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location
        shadowAnchor: [0, 0],  // the same for the shadow
        popupAnchor:  [-3, -26] // point from which the popup should open relative to the iconAnchor
      })
    );

    aIcon.push(
      L.icon({
        iconUrl: '1r.png',
        shadowUrl: '1r.png',

        iconSize:     [25, 25], // size of the icon
        shadowSize:   [0, 0], // size of the shadow
        iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location
        shadowAnchor: [0, 0],  // the same for the shadow
        popupAnchor:  [-3, -26] // point from which the popup should open relative to the iconAnchor
      })
    );

    aIcon.push(
      L.icon({
        iconUrl: '2r.png',
        shadowUrl: '2r.png',

        iconSize:     [25, 25], // size of the icon
        shadowSize:   [0, 0], // size of the shadow
        iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location
        shadowAnchor: [0, 0],  // the same for the shadow
        popupAnchor:  [-3, -26] // point from which the popup should open relative to the iconAnchor
      })
    );

    aIcon.push(
      L.icon({
        iconUrl: '3r.png',
        shadowUrl: '3r.png',

        iconSize:     [25, 25], // size of the icon
        shadowSize:   [0, 0], // size of the shadow
        iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location
        shadowAnchor: [0, 0],  // the same for the shadow
        popupAnchor:  [-3, -26] // point from which the popup should open relative to the iconAnchor
      })
    );



    var currentMarkers = new Array();


    var xhttp = new XMLHttpRequest();

    xhttp.open("GET", "/trams", true);
    xhttp.send();


    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var obj = JSON.parse(this.responseText);

        document.getElementById("info").innerHTML = this.responseText;

        if (currentMarkers) {
          for (var j = 0; j < currentMarkers.length; j++) {
            mymap.removeLayer(currentMarkers[j]);
          }
        }

        for (var i = 0; i < obj.length; i++) {
          var marker =
           currentMarkers.push(L.marker([obj[i].coordinates.x, obj[i].coordinates.y]
             , {
                 icon: new L.DivIcon({
                     className: 'my-div-icon',
                     html: '<img class="my-div-image" src="1r.png"/>'+
                           '<span class="my-div-span">'+obj[i].line.number + '>' + obj[i].line.direction +'</span>'
                 })
             }
           ).addTo(mymap));
        }

        xhttp.open("GET", "/trams", true);
        xhttp.send();
      }
    };

    var time = new XMLHttpRequest();

    time.open("GET", "/time", true);
    time.send();

    time.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {

        document.getElementById("time").innerHTML = this.responseText;

        time.open("GET", "/time", true);
        time.send();
      }
    };



  </script>
</body>
</html>
